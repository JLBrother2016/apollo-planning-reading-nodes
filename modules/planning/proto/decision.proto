syntax = "proto2";

package apollo.planning;

import "modules/common/proto/geometry.proto";
import "modules/common/proto/vehicle_signal.proto";
import "modules/routing/proto/routing.proto";
// 决策相关的协议接口
message TargetLane {                                          // 目标车道
  // lane id
  optional string id = 1;                                     // 车道的id号
  optional double start_s = 2;  // in meters                  // 车道的起点
  optional double end_s = 3;    // in meters                  // 车道的终点
  optional double speed_limit = 4;  // in m/s                 // 该车道上行驶的限速是多少
}

message ObjectIgnore {
}

enum StopReasonCode {                                         // 停止的原因
  STOP_REASON_HEAD_VEHICLE = 1;                               // 前面有车辆
  STOP_REASON_DESTINATION = 2;                                // 达到目的地了
  STOP_REASON_PEDESTRIAN = 3;                                 // 遇到行人了
  STOP_REASON_OBSTACLE = 4;                                   // 遇到障碍物了
  STOP_REASON_PREPARKING = 5;                                 // 提前停车了
  STOP_REASON_SIGNAL = 100; // only for red signal            // 因为红灯停车了
  STOP_REASON_STOP_SIGN = 101;                                // 因为停止信号停车了
  STOP_REASON_YIELD_SIGN = 102;                               // 因为避让信号停车了
  STOP_REASON_CLEAR_ZONE = 103;                               // 因为不明区域停车了
  STOP_REASON_CROSSWALK = 104;                                // 因为人行道停车
  STOP_REASON_CREEPER = 105;                                  // 因为爬行动物停车
  STOP_REASON_REFERENCE_END = 106; // end of the reference_line 因为中心参考线结束而停车
  STOP_REASON_YELLOW_SIGNAL = 107; // yellow signal           因为黄灯进行停车
  STOP_REASON_PULL_OVER = 108; // pull over                   // pull over 这个是啥我还真不知道呀~~

}

message ObjectStop {
  optional StopReasonCode reason_code = 1;                      // 停止的原因
  optional double distance_s = 2;  // in meters                 // 距离s
  // When stopped, the front center of vehicle should be at this point.
  optional apollo.common.PointENU stop_point =3;                // UTM坐标系中的坐标
  // When stopped, the heading of the vehicle should be stop_heading.
  optional double stop_heading = 4;                             // 停止的航向角
  repeated string wait_for_obstacle = 5;                        // 因为那个障碍物在进行障碍物等待
}

// dodge the obstacle in lateral direction when driving
message ObjectNudge {
  enum Type {
    LEFT_NUDGE = 1;  // drive from the left side of the obstacle
    RIGHT_NUDGE = 2;  // drive from the right side of the obstacle
    NO_NUDGE = 3;  // No nudge is set.
  };
  optional Type type = 1;
  // minimum lateral distance in meters. positive if type = LEFT_NUDGE
  // negative if type = RIGHT_NUDGE
  optional double distance_l = 2;
}

message ObjectYield {
  optional double distance_s = 1;  // minimum longitudinal distance in meters
  optional apollo.common.PointENU fence_point = 2;
  optional double fence_heading = 3;
  optional double time_buffer = 4;  // minimum time buffer required after the obstacle reaches the intersect point.
}

message ObjectFollow {
  optional double distance_s = 1;  // minimum longitudinal distance in meters
  optional apollo.common.PointENU fence_point = 2;                 // 围栏中的点
  optional double fence_heading = 3;                               // 围栏中的航向
}

message ObjectOvertake {
  optional double distance_s = 1;  // minimum longitudinal distance in meters
  optional apollo.common.PointENU fence_point = 2;
  optional double fence_heading = 3;    // fence_heading是用来干嘛的呢? fence是围栏的意思
  // 障碍物到达交叉点之前所需的最小时间缓冲
  optional double time_buffer = 4;  // minimum time buffer required before the obstacle reaches the intersect point.
}

message ObjectSidePass {                                               // 要绕行的物体
  enum Type {                                                          // 要从左边绕行还是从右边绕行                
    LEFT = 1;
    RIGHT = 2;
  };
  optional Type type = 1;                                              // 就是要从一个物体的那边绕行     
}

// unified object decision while estop
message ObjectAvoid {
}
// 决策的类型
message ObjectDecisionType {
  oneof object_tag {
    ObjectIgnore ignore = 1;                                            // 忽略
    ObjectStop stop = 2;                                                // 停止的障碍物
    ObjectFollow follow = 3;                                            // 跟随的障碍物
    ObjectYield yield = 4;                                              // 避让的物体
    ObjectOvertake overtake = 5;                                        // 可以超越的物体
    ObjectNudge nudge = 6;                                              // 可以忽略的物体
    ObjectSidePass sidepass = 7;                                        // 从旁边绕行
    ObjectAvoid avoid = 8;                                              // 静止同行的物体
  }
}


message ObjectDecision {
  optional string id = 1;                                                // 障碍物的id号
  optional int32 perception_id = 2;                                      // 感知到的id号
  repeated ObjectDecisionType object_decision = 3;                       // 决策的类型, 熊object_tag中选择一个
}

message ObjectDecisions {
  repeated ObjectDecision decision = 1;                                  // 重复的物体的决策
}

message MainStop {
  optional StopReasonCode reason_code = 1;                               // 停止的原因的代码
  optional string reason = 2;                                            // 停止的原因
  // When stopped, the front center of vehicle should be at this point.
  optional apollo.common.PointENU stop_point = 3;                        // 停止的位置
  // When stopped, the heading of the vehicle should be stop_heading.
  optional double stop_heading = 4;                                      // 停止的朝向
  optional apollo.routing.ChangeLaneType change_lane_type = 5;           // FORWARD = 0;LEFT = 1;RIGHT = 2;
}

message EmergencyStopHardBrake {
}

message EmergencyStopCruiseToStop {
}

message MainEmergencyStop {
  // Unexpected event happened, human driver is required to take over
  enum ReasonCode {
    ESTOP_REASON_INTERNAL_ERR = 1;
    ESTOP_REASON_COLLISION = 2;     // 碰撞错误
    ESTOP_REASON_ST_FIND_PATH = 3;
    ESTOP_REASON_ST_MAKE_DECISION = 4;
    ESTOP_REASON_SENSOR_ERROR = 5;
  }
  optional ReasonCode reason_code = 1;
  optional string reason = 2;
  oneof task {
    EmergencyStopHardBrake hard_brake = 3;  // hard brake                // 紧急刹车
    EmergencyStopCruiseToStop cruise_to_stop = 4;  // cruise to stop     // 因为巡航结束而停车
  }
}

message MainCruise {
  // cruise current lane
  optional apollo.routing.ChangeLaneType change_lane_type = 1;   // 巡航车道
}

// This message is deprecated
message MainChangeLane {
  enum Type {
    LEFT = 1;       // 是左换道, 还是右换道
    RIGHT = 2;
  };
  optional Type type = 1;
  repeated TargetLane default_lane = 2;     // 目标道
  optional MainStop default_lane_stop = 3;  // 默认停的位置
  optional MainStop target_lane_stop = 4;   // 目标位置
}

message MainMissionComplete {
  // arrived at routing destination
  // When stopped, the front center of vehicle should be at this point.
  optional apollo.common.PointENU stop_point = 1;  // 到达routing的终点， 是在UTM坐标系中, 但是没有高度
  // When stopped, the heading of the vehicle should be stop_heading.
  optional double stop_heading = 2;    // 停止的航向角
}

message MainNotReady {
  // decision system is not ready.
  // e.g. wait for routing data.
  optional string reason = 1;   // 具体原因是什么
}

message MainParking {
}

message MainDecision {
  oneof task {                                                  // 只能选一个
    MainCruise cruise = 1;                                      // 巡航
    MainStop stop = 2;                                          // 停止
    MainEmergencyStop estop = 3;                                // 紧急停车
    MainChangeLane change_lane = 4 [deprecated=true];           // 换道
    MainMissionComplete mission_complete = 6;                   // 完成任务
    MainNotReady not_ready = 7;                                 // 没有停好
    MainParking parking = 8;                                    // 停车
  }
  repeated TargetLane target_lane = 5 [deprecated = true];      // 目标车道, deprecated = true表示该字段已经被弃用
}
// 主要决策, 目标决策, 车辆信号
message DecisionResult {
  optional MainDecision main_decision = 1;                      // 主要的决策主要是自动驾驶车辆的决策
  optional ObjectDecisions object_decision = 2;                 // 物体决策主要是障碍物车辆或人的决策
  optional apollo.common.VehicleSignal vehicle_signal = 3;      // 转向, 灯, 喇叭等信号
}
