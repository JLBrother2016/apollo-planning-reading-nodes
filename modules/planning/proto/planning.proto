syntax = "proto2";

package apollo.planning;

import "modules/canbus/proto/chassis.proto";
import "modules/common/proto/drive_state.proto";
import "modules/common/proto/geometry.proto";
import "modules/common/proto/header.proto";
import "modules/common/proto/pnc_point.proto";
import "modules/common/proto/vehicle_signal.proto";
import "modules/map/proto/map_id.proto";
import "modules/planning/proto/decision.proto";
import "modules/planning/proto/planning_internal.proto";

// Deprecated: replaced by apollo.common.TrajectoryPoint                    // TrajectoryPoint的封装和抽象性更好
message ADCTrajectoryPoint {                                                // 轨迹点会包含很多信息(x,y,z), sl坐标系等
  optional double x = 1;  // in meters.
  optional double y = 2;  // in meters.
  optional double z = 3;  // height in meters.

  optional double speed = 6;  // speed, in meters / second
  optional double acceleration_s = 7;  // acceleration in s direction
  optional double curvature = 8;  // curvature (k = 1/r), unit: (1/meters)
  // change of curvature in unit s (dk/ds)
  optional double curvature_change_rate = 9;
  // in seconds (relative_time = time_of_this_state - timestamp_in_header)
  optional double relative_time = 10;
  optional double theta = 11;  // relative to absolute coordinate system
  // calculated from the first point in this trajectory
  optional double accumulated_s = 12;

  // in meters, reference to route SL-coordinate
  optional double s = 4 [deprecated = true];
  // in meters, reference to route SL-coordinate
  optional double l = 5 [deprecated = true];
}

// Deprecated: replaced by apollo.common.PathPoint
message ADCPathPoint {                                                       // 自动驾驶车辆在path中的一个点, 由path point取代了
  optional double x = 1;  // in meters                                       // x, y, z的三轴坐标
  optional double y = 2;  // in meters
  optional double z = 3;  // in meters
  optional double curvature = 4;  // curvature (k = 1/r), unit: (1/meters)   // 曲率
  optional double heading = 5;  // relative to absolute coordinate system    // 航向
}

message ADCSignals {
  enum SignalType {
    LEFT_TURN = 1;
    RIGHT_TURN = 2;
    LOW_BEAM_LIGHT = 3;
    HIGH_BEAM_LIGHT = 4;
    FOG_LIGHT = 5;
    EMERGENCY_LIGHT = 6;
  }
  repeated SignalType signal = 1;
}
// emergency stop(紧急停车)
message EStop {                                         // 是否需要紧急停车
  // is_estop == true when emergency stop is required
  optional bool is_estop = 1;
  optional string reason = 2;                           // 紧急停车的原因
}

message TaskStats {
  optional string name = 1;                             // 任务的名字
  optional double time_ms = 2;                          // 任务执行的时间
}

message LatencyStats {
  optional double total_time_ms = 1;                                               // 总时间(单位是ms)
  repeated TaskStats task_stats = 2;                                               // 多个任务的状态
  optional double init_frame_time_ms = 3;                                          // 初始化一帧数据的时间(ms)
}
// 轨迹
// next id: 21
message ADCTrajectory {                                                            // 自动驾驶车辆的轨迹
  optional apollo.common.Header header = 1;                                        // 头结点的信息

  optional double total_path_length = 2; // in meters                              // path(路径)的总长度
  optional double total_path_time = 3; // in seconds                               // 走完path(路径)的总时间

  // path data + speed data  //包含了PathPoint
  repeated apollo.common.TrajectoryPoint trajectory_point = 12;                    // 重复的轨迹点(包含了path point和速度, 加速度, 相对时间戳等信息)

  optional EStop estop = 6;                                                        // 紧急停车

  // path point without speed info
  repeated apollo.common.PathPoint path_point = 13;                                // 没有速度信息的道路采样点的信息

  // is_replan == true mean replan triggered  // 重新触发
  optional bool is_replan = 9 [default = false];                                   // 是否需要重新进行规划处理(默认是不进行规划的)

  // Specify trajectory gear     // canbus 相关的gear
  optional apollo.canbus.Chassis.GearPosition gear = 10;                           // 自动驾驶车辆的档位在哪里
  // planning的决策结果
  optional apollo.planning.DecisionResult decision = 14;                           // 决策的结果

  optional LatencyStats latency_stats = 15;                                        // 延迟统计的状态

  // the routing used for current planning result
  optional apollo.common.Header routing_header = 16;                               // 当前使用的routing的结果(就是routing的头)
  optional apollo.planning_internal.Debug debug = 8;                               // planning内部debug的信息, debug里面包含了所有的planning的数据

  // replaced by path_point
  repeated ADCPathPoint adc_path_point = 7 [deprecated=true];                      // 自动驾驶车辆的路径点由path point取代
  // replaced by trajectory_point
  repeated ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated=true];          // 自动驾驶车辆的轨迹点, 现在已经被trajetory point这个数据段取代
  optional apollo.common.VehicleSignal signal = 11 [deprecated=true];              // 车辆的信号信息, 这个字段已将被弃用
  enum RightOfWayStatus {                                                          // 道路右边的状态
    UNPROTECTED = 0;                                                               // 没有被保护
    PROTECTED = 1;                                                                 // 已经被保护
  }
  optional RightOfWayStatus right_of_way_status = 17;                              // 道路状态

  // lane id along reference line
  repeated apollo.hdmap.Id lane_id = 18;                                           // 沿参考中心线的道路ID

  // set the engage advice for based on current planning result.
  optional apollo.common.EngageAdvice engage_advice = 19;                          // 根据当前planning的结果, 设置处理建议

  // the region where planning cares most
  message CriticalRegion {                                                         // 规划器最关心的地区
    repeated apollo.common.Polygon region = 1;                                     // 几个多边形
  }

  // critial region will be empty when planning is NOT sure which region is critical
  // critial regions may or may not overlap
  optional CriticalRegion critical_region = 20;                                    // 当规划器不确定哪个区域是关键区域可能重叠或不重叠时，关键区域将为空

  enum TrajectoryType {                                                            // 轨迹的类型
    UNKNOWN = 0;                                                                   // 不知道是啥轨迹
    NORMAL = 1;                                                                    // 正常的轨迹
    PATH_FALLBACK = 2;                                                             // path路径反馈的轨迹, 位移反馈和速度反馈(在做双闭环pid的时候可能会用到)
    SPEED_FALLBACK = 3;                                                            // 速度反馈的轨迹
  } 
  optional TrajectoryType trajectory_type = 21 [ default = UNKNOWN];               // 默认是不知道是什么类型
}
